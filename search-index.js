crystal_doc_search_index_callback({"repository_name":"github.com/botanicus/hour","body":"# About\n[![Build status][BS img]][Build status]\n[API docs](https://botanicus.github.io/hour-crystal/)\n\nHour class to work with hours, minutes and seconds, convert between various units and format the output. _Here's version of this library for Ruby: [hour-ruby](https://github.com/botanicus/hour-ruby)._\n\n# Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  hour:\n    github: botanicus/hour\n```\n\n# Usage\n\n```crystal\nrequire \"hour\"\n\nhour = Hour.from(minutes: 85)\nputs \"It's #{hour.hours.value}:#{hour.minutes.value}!\"\n\nhour = Hour.new(1, 25) + Hour.new(s: 10)\nputs \"It's #{hour.to_s}!\"\n\nputs \"The system time is #{Hour.now}!\"\n```\n\n# Development\n\n```shell\ngem install guard guard-shell\n\n# Watch for changes and run tests, generate documentation and fix formatting.\nguard\n```\n\n# TODO\n\n- Fix TODOs in the code.\n- Release version 0.1.\n\n[Build status]: https://travis-ci.org/botanicus/hour\n[BS img]: https://travis-ci.org/botanicus/hour.svg?branch=master\n","program":{"html_id":"github.com/botanicus/hour/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/botanicus/hour","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/botanicus/hour/Hour","path":"Hour.html","kind":"class","full_name":"Hour","name":"Hour","abstract":false,"superclass":{"html_id":"github.com/botanicus/hour/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/botanicus/hour/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/botanicus/hour/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"hour/version.cr","line_number":3,"url":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour/version.cr"},{"filename":"hour.cr","line_number":3,"url":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr"}],"repository_name":"github.com/botanicus/hour","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"PACKAGE","value":"YAML.parse(RAW_PKG_DATA)","doc":"The whole content of shard.yml.","summary":"<p>The whole content of shard.yml.</p>"},{"name":"VERSION","value":"PACKAGE[\"version\"]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"from_time(time)-class-method","html_id":"from_time(time)-class-method","name":"from_time","doc":"TODO: document and write tests.","summary":"<p><span class=\"flag orange\">TODO</span>  document and write tests.</p>","abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":""}],"args_string":"(time)","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L60","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L60","def":{"name":"from_time","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(h: time.hours, m: time.minutes, s: time.seconds)"}},{"id":"parse(serialised_hour:String)-class-method","html_id":"parse(serialised_hour:String)-class-method","name":"parse","doc":"Build an hour instance from an hour string.\n\n    Hour.parse(\"1:00:00\")\n    Hour.parse(\"1:00\", \"%h:%m?\") # Will work with \"1:00\" or just \"1\".\n\nTODO: Implement me, test me and document me.","summary":"<p>Build an hour instance from an hour string.</p>","abstract":false,"args":[{"name":"serialised_hour","doc":null,"default_value":"","external_name":"serialised_hour","restriction":"String"}],"args_string":"(serialised_hour : String)","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L70","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L70","def":{"name":"parse","args":[{"name":"serialised_hour","doc":null,"default_value":"","external_name":"serialised_hour","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"argument_array = (serialised_hour.split(':')).map(&.to_i)\ncase argument_array.size\nwhen 3\n  p(arguments = Tuple(Int32).from(argument_array))\nwhen (0..2)\n  raise(ArgumentError.new(\"If format is not H:M:S, formatting string must be provided.\"))\nwhen (4..10)\n  raise(ArgumentError, \"Too many arguments.\")\nend\n"}}],"constructors":[{"id":"from(minutes=0,seconds=0):self-class-method","html_id":"from(minutes=0,seconds=0):self-class-method","name":"from","doc":"Build an hour instance from *either* **minutes** *or* **seconds**.\nUnlike `.new`, either of these values can be over 60.\n\n    Hour.from(minutes: 85)  # => Hour.new(h: 1, m: 25)\n    Hour.from(seconds: 120) # => Hour.new(m: 2)","summary":"<p>Build an hour instance from <em>either</em> <strong>minutes</strong> <em>or</em> <strong>seconds</strong>.</p>","abstract":false,"args":[{"name":"minutes","doc":null,"default_value":"0","external_name":"minutes","restriction":""},{"name":"seconds","doc":null,"default_value":"0","external_name":"seconds","restriction":""}],"args_string":"(minutes = <span class=\"n\">0</span>, seconds = <span class=\"n\">0</span>) : self","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L90","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L90","def":{"name":"from","args":[{"name":"minutes","doc":null,"default_value":"0","external_name":"minutes","restriction":""},{"name":"seconds","doc":null,"default_value":"0","external_name":"seconds","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if (minutes != 0) && (seconds != 0)\n  raise(ArgumentError.new(\"Use either minutes OR seconds, not both.\"))\nend\nif minutes > 0\n  self.new(h: minutes / 60, m: minutes % 60)\nelse\n  self.from(minutes: seconds / 60) + self.new(s: seconds % 60)\nend\n"}},{"id":"new(h=0,m=0,s=0)-class-method","html_id":"new(h=0,m=0,s=0)-class-method","name":"new","doc":"Build an hour instance from *h*, *m* and *s*.\nRaises an argument error if *m* or *s* is a value over 60.\n\nFor instantiating this class from a *minutes* or *seconds* value over 60, use `.from`.","summary":"<p>Build an hour instance from <em>h</em>, <em>m</em> and <em>s</em>.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"0","external_name":"h","restriction":""},{"name":"m","doc":null,"default_value":"0","external_name":"m","restriction":""},{"name":"s","doc":null,"default_value":"0","external_name":"s","restriction":""}],"args_string":"(h = <span class=\"n\">0</span>, m = <span class=\"n\">0</span>, s = <span class=\"n\">0</span>)","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L108","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L108","def":{"name":"new","args":[{"name":"h","doc":null,"default_value":"0","external_name":"h","restriction":""},{"name":"m","doc":null,"default_value":"0","external_name":"m","restriction":""},{"name":"s","doc":null,"default_value":"0","external_name":"s","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(h, m, s)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"now:self-class-method","html_id":"now:self-class-method","name":"now","doc":"TODO: Test me and document me.","summary":"<p><span class=\"flag orange\">TODO</span>  Test me and document me.</p>","abstract":false,"args":[],"args_string":" : self","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L55","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L55","def":{"name":"now","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self.from_time(Time.now)"}}],"instance_methods":[{"id":"+(other:Hour):Hour-instance-method","html_id":"+(other:Hour):Hour-instance-method","name":"+","doc":"Returns a new Hour instance returning the total time of the two hour instances.\n\n    Hour.new(m: 25, s: 10) + Hour.new(h: 1) # => Hour.new(1, 25, 10)","summary":"<p>Returns a new Hour instance returning the total time of the two hour instances.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Hour"}],"args_string":"(other : Hour) : Hour","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L121","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L121","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Hour"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hour","visibility":"Public","body":"hours = (@h + other.h) + (((@m + other.m) + ((@s + other.s) / 60)) / 60)\nminutes = ((@m + other.m) + ((@s + other.s) / 60)) % 60\nseconds = (@s + other.s) % 60\nself.class.new(hours, minutes, seconds)\n"}},{"id":"hours-instance-method","html_id":"hours-instance-method","name":"hours","doc":"Returns a decorator providing convenience methods for working with hours.\n\n    Hour.new(1, 25).hours.round # => 1\n    Hour.new(1, 45).hours.round # => 2","summary":"<p>Returns a decorator providing convenience methods for working with hours.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L132","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L132","def":{"name":"hours","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HourUnit.new(self)"}},{"id":"minutes-instance-method","html_id":"minutes-instance-method","name":"minutes","doc":"Returns a decorator providing convenience methods for working with minutes.\n\n    Hour.new(1, 25, 52).minutes.value       # => 25\n    Hour.new(1, 25, 52).minutes.round       # => 26\n    Hour.new(1, 25, 52).minutes.total       # => 85\n    Hour.new(1, 25, 52).minutes.round_total # => 86","summary":"<p>Returns a decorator providing convenience methods for working with minutes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L142","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L142","def":{"name":"minutes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MinuteUnit.new(self)"}},{"id":"seconds-instance-method","html_id":"seconds-instance-method","name":"seconds","doc":"Returns a decorator providing convenience methods for working with seconds.\n\n    Hour.new(m: 1, s: 10).seconds.value # => 10\n    Hour.new(1, 45, 10  ).seconds.total # => (1 * 60 * 60) + (45 * 60) + 10","summary":"<p>Returns a decorator providing convenience methods for working with seconds.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L150","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L150","def":{"name":"seconds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"SecondUnit.new(self)"}},{"id":"to_s(format:String?):String-instance-method","html_id":"to_s(format:String?):String-instance-method","name":"to_s","doc":"TODO: Add formatting string support.\nTODO: Pad 0s. I. e. \"#{self.hours}:#{format('%02d', self.minutes_over_the_hour)}\"","summary":"<p><span class=\"flag orange\">TODO</span>  Add formatting string support.</p>","abstract":false,"args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String | ::Nil"}],"args_string":"(format : String?) : String","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L156","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L156","def":{"name":"to_s","args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"#{@h}:#{@m}:#{@s}\""}},{"id":"to_time(today=Time.now)-instance-method","html_id":"to_time(today=Time.now)-instance-method","name":"to_time","doc":null,"summary":null,"abstract":false,"args":[{"name":"today","doc":null,"default_value":"Time.now","external_name":"today","restriction":""}],"args_string":"(today = <span class=\"t\">Time</span>.now)","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L162","source_link":"https://github.com/botanicus/hour/blob/0880e85edc69d587b3f7b16d99c6fa1198b854c5/src/hour.cr#L162","def":{"name":"to_time","args":[{"name":"today","doc":null,"default_value":"Time.now","external_name":"today","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Time.new(today.year, today.month, today.day, self.hours, self.minutes_over_the_hour)"}}],"macros":[],"types":[]}]}})